; ██╗     ███████╗███████╗████████╗
; ██║     ██╔════╝██╔════╝╚══██╔══╝
; ██║     █████╗  █████╗     ██║
; ██║     ██╔══╝  ██╔══╝     ██║
; ███████╗███████╗██║        ██║
; ╚══════╝╚══════╝╚═╝        ╚═╝

;; WORKSPACES
; this is one only
(deflisten hyprland "./scripts.sh hyprland")
(defwidget workspace [id]
		   (button
			:class "${hyprland.active == id ? "w_active" : hyprland.workspaces[id - 1].exists? "w_inactive" : "w_unset"}"
			:onclick "hyprctl dispatch workspace ${id}"
			"${id}"))
; This is all the workspaces
(defwidget workspaces []
		   (eventbox
			:onscroll "[[ {} == 'up' ]] && hyprctl dispatch workspace e + 1 || hyprctl dispatch workspace e-1"
			(box
			 :class "workspaces"
			 :spacing 4
			 (workspace :id 1)
			 (workspace :id 2)
			 (workspace :id 3)
			 (workspace :id 4)
			 (workspace :id 5)
			 (workspace :id 6)
			 (workspace :id 7)
			 (workspace :id 8)
			 (workspace :id 9)
			 (workspace :id 10)
			 )))

(defvar kb_es false)
(defwidget left[]
	(box :halign "start"
    (workspaces)))

;  ██████╗███████╗███╗   ██╗████████╗███████╗██████╗
; ██╔════╝██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔══██╗
; ██║     █████╗  ██╔██╗ ██║   ██║   █████╗  ██████╔╝
; ██║     ██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗
; ╚██████╗███████╗██║ ╚████║   ██║   ███████╗██║  ██║
;  ╚═════╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝

(defpoll song :interval "1s" "~/.config/eww/scripts/music.sh --song")
(defwidget music []
		   (box :orientation "h"
				:halign "center"
				:class "music"
				song))

(defwidget center[]
(box :class "center"
    :orientation "h"
    :halign "center"
	(music)))


; ██████╗ ██╗ ██████╗ ██╗  ██╗████████╗
; ██╔══██╗██║██╔════╝ ██║  ██║╚══██╔══╝
; ██████╔╝██║██║  ███╗███████║   ██║
; ██╔══██╗██║██║   ██║██╔══██║   ██║
; ██║  ██║██║╚██████╔╝██║  ██║   ██║
; ╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝

; TIME
(defpoll time_poll :interval "1s" `date +%H:%M:%S`)
(defwidget time []
    (box :orientation "h"
        :class "time"
        :halign "end"
        time_poll))

;BATTERY
(defpoll battery :interval "15s" "./scripts/battery.sh --bat")
(defpoll battery_status :interval "1m" "./scripts/battery.sh --bat-st")
(defwidget bat []
    (box :class "bat_module"
        :vexpand "false"
        :hexpand "false"
        (circular-progress
            :value battery
            :class "batbar"
            :thickness 2
        (button
            :class "iconbat"
            :limit-width 2
            :tooltip "battery on ${battery}: ${battery_status}"
            "${battery}"))))
; MEMORY
(defpoll memory :interval "15s" "./scripts/memory.sh")
(defwidget mem []
    (box
        :class "mem_module"
        :vexpand "false"
        :hexpand "false"
        (circular-progress
            :value memory
            :class "membar"
            :thickness 2
        (button
            :class "iconmem"
            :limit-width 1
            :tooltip "Used x of y"
            "${memory}"))))

(defwidget right[]
    (box :class "right"
        :orientation "h"
        :halign "end"
        (mem)
        (bat)
        (time)))



; ██████╗  █████╗ ██████╗ ███████╗
; ██╔══██╗██╔══██╗██╔══██╗██╔════╝
; ██████╔╝███████║██████╔╝███████╗
; ██╔══██╗██╔══██║██╔══██╗╚════██║
; ██████╔╝██║  ██║██║  ██║███████║
; ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝

(defwidget bar_1 []
    (centerbox :class "bar_class"
        :orientation "h"
    (left)
    (center)
    (right)))

(defwindow bar0
    :monitor 0
    :geometry (geometry :x "0%"
        :y "0px"
        :width "100%"
        :height "10px"
        :anchor "top center")
    :stacking "fg"
    :exclusive true
    (bar_1))

(defwindow bar1
    :monitor 1
    :geometry (geometry :x "0%"
        :y "0px"
        :width "100%"
        :height "10px"
        :anchor "top center")
    :stacking "fg"
    :exclusive true
    (bar_1))
